name: Build Docker Image

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      target_port:
        required: false
        type: number
        default: 3300
      node_base_image:
        required: false
        type: string
        default: pinjammodal/node:12.22.9-3.14
      env_file:
        description: 'Use to load environment variable from file'
        required: false
        type: string
      strict_scan:
        required: false
        type: string
        default: true
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true
      signer_key:
        required: true
      dct_signer_priv_key:
        required: true
      signer_pass:
        required: true
      snyk_token:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}
  STRICT_SCAN: ${{ inputs.strict_scan || false }}

jobs:
  define:
    runs-on: ubuntu-latest

    outputs:
      continueOnError: ${{ steps.strictScan.outputs.continueOnError }}
      runner: ${{ steps.runner.outputs.value }}

    steps:
      - id: strictScan
        run: |
          if ${{ inputs.strict_scan == 'false'}}
          then
            echo "continueOnError=${{ toJSON(true) }}" >> $GITHUB_OUTPUT
            echo "::notice title=continueOnError::true"
          else
            echo "continueOnError=${{ toJSON(false) }}" >> $GITHUB_OUTPUT
            echo "::notice title=continueOnError::false"
          fi
      - id: runner
        run: |
          if ${{startsWith(inputs.docker_context, 'PM')}}
          then
            echo "value=fit-runner-1" >> $GITHUB_OUTPUT
            echo "::notice title=runner::fit-runner-1"
          elif ${{startsWith(inputs.docker_context, 'DMS')}}
          then
            echo "value=dms-runner-1" >> $GITHUB_OUTPUT
            echo "::notice title=runner::dms-runner-1"
          fi

  code-scan:
    needs: define
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: docker context use default

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: ${{ fromJSON(needs.define.outputs.continueOnError) }}
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          args: --severity-threshold=high
          command: test

  build-scan-push:
    needs: [define, code-scan]
    runs-on: ubuntu-latest

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Meta
        id: meta
        run: echo "tags=pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Notice meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

      - name: Set Context Default
        run: docker context use default

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}

      - name: Load Environment Variable
        if: inputs.env_file != ''
        run: source ${{ inputs.env_file }}

      - name: Build Docker
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          outputs: type=docker
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_BASE=${{ inputs.node_base_image }}
    
      - run: docker context use default

      - name: Login to Container Registry
        run: docker login -u ${{ secrets.cr_username }} -p ${{ secrets.cr_token }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          image: ${{ steps.meta.outputs.tags }}
          args: --severity-threshold=high
          command: test

      - name: Check Build Result
        run: |
          docker images | grep ${{ env.SERVICE_NAME }} > tmp_docker
          if grep -wq ${GITHUB_REF#refs/*/} tmp_docker; then echo "::notice title=image build verified::${{ steps.meta.outputs.tags }} image found" ; else echo "::error title=build error::${{ steps.meta.outputs.tags }} not found"; fi

      - name: Push Docker Image to Container Registry
        run: docker push ${{ steps.meta.outputs.tags }}

      - name: runner image cleanup
        run: |
          docker context use default
          docker image prune -f ${{ steps.meta.outputs.tags }}
          docker rmi -f $(docker images -f "dangling=true" -q) || true
