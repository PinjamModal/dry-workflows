name: Deploy Service/Web App

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      published_port:
        required: true
        type: number
      target_port:
        required: false
        type: number
        default: 3300
      compose_file:
        required: false
        type: string
      docker_context:
        required: true
        type: string
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}

jobs:

  define:
    runs-on: ubuntu-latest

    outputs:
      nodeEnv: ${{ steps.nodeEnv.outputs.value }}
      composeFile: ${{ steps.composeFile.outputs.value }}
      runner: ${{ steps.runner.outputs.value }}

    steps:
      - id: nodeEnv
        run: |
          if ${{endsWith(github.event.ref, 'prod')}}
          then
            echo "value=production" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::production"
          elif ${{endsWith(github.event.ref, 'demo')}}
          then
            echo "value=demo" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::demo"
          elif ${{endsWith(github.event.ref, 'staging')}}
          then
            echo "value=staging" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::staging"
          else
            echo "value=development" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::development"
          fi
      - id: composeFile
        run: |
          if ${{ inputs.compose_file == ''}} && ${{endsWith(github.event.ref, 'prod')}}
          then
            echo "value=prod-stack" >> $GITHUB_OUTPUT
            echo "::notice title=composeFile::values-prod.yaml"
          elif ${{ inputs.compose_file == ''}} && ${{endsWith(github.event.ref, 'dev')}}
          then
            echo "value=dev-stack" >> $GITHUB_OUTPUT
            echo "::notice title=composeFile::values-dev.yaml"
          elif ${{ inputs.compose_file == ''}} && ${{endsWith(github.event.ref, 'demo')}}
          then
            echo "value=demo-stack" >> $GITHUB_OUTPUT
            echo "::notice title=composeFile::values-demo.yaml"
          elif ${{ inputs.compose_file == ''}} && ${{endsWith(github.event.ref, 'staging')}}
          then
            echo "value=staging-stack" >> $GITHUB_OUTPUT
            echo "::notice title=composeFile::values-staging.yaml"
          else
            # echo "value=${{ inputs.compose_file }}" >> $GITHUB_OUTPUT
            # echo "::notice title=composeFile::${{ inputs.compose_file }}"
            echo "value=stack" >> $GITHUB_OUTPUT
            echo "::notice title=composeFile::stack"
          fi
      - id: runner
        run: |
          if ${{startsWith(inputs.docker_context, 'PM')}}
          then
            echo "value=fit-runner-1" >> $GITHUB_OUTPUT
            echo "::notice title=runner::fit-runner-1"
          elif ${{startsWith(inputs.docker_context, 'DMS')}}
          then
            echo "value=dms-runner-1" >> $GITHUB_OUTPUT
            echo "::notice title=runner::dms-runner-1"
          fi
      - name: Check Branch
        run : echo "::notice title=branch::${{ github.event.base_ref }}"

  metadata:
    runs-on: ubuntu-latest 

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Docker Meta
        id: meta
        run: echo "tags=pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT 

      - name: Notice Meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

  swarm-deploy:
    needs: [metadata, define]
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}
      
      - name: Set Context
        run: docker context use ${{ inputs.docker_context }}

      - uses: actions/setup-node@v3
        if: env.STACK == 0
        with:
          node-version: '12'

      - run: npm install -g mustache
        if: env.STACK == 0

      - name: Set template variable
        if: env.STACK == 0
        run: |
          cat<<EOT > deployment/templates/config.json
          {
            "service_name": "${{ env.SERVICE_NAME }}",
            "image": "${{ needs.metadata.outputs.imageTag }}",
            "node_env": "${{ needs.define.outputs.nodeEnv }}",
            "target_port": "${{ inputs.target_port }}",
            "published_port": "${{ inputs.published_port }}"
          }
          EOT   

      - name: Helm deploy
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_FLEXY }}
      - run: |
            kubectl config use-context STAGING
            kubectl get ns
            helm upgrade ${{ env.SERVICE_NAME }} --install Charts/${{ env.SERVICE_NAME }} -f ${{ needs.define.outputs.composeFile }} -n ${args.name_space} --create-namespace --set image.tag=${{ needs.metadata.outputs.imageTag }}